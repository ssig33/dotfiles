#!/usr/bin/env ruby
# frozen_string_literal: true

begin
  require 'thor'
  require 'http'
  require 'open3'
  require 'json'
rescue LoadError
  system 'gem install thor http'
  Gem.clear_paths
  retry
end

# fuckgit
class GitHelper < Thor
  default_command :fuckgit

  no_commands do
    def current_branch
      `git rev-parse --abbrev-ref HEAD`.strip
    end

    def generate_commit_message
      changed_files = `git diff --name-only HEAD`.split("\n")
      return '' if changed_files.count.zero?

      if changed_files.size <= 2
        "update #{changed_files.join(', ')}"
      else
        "update\n\n#{changed_files.join("\n")}"
      end
    end

    def use_ai_commit
      system 'npm i -g git-aicommit' unless system 'which git-aicommit'

      system 'git-aicommit'
    end

    def use_ai_commit
      exclude = [
        '*.lock', '*.lockb', '*-lock.json', '*-lock.yaml', 'Gemfile.lock'
      ]
      diff = `git diff --staged --no-ext-diff --diff-filter=ACMRTUXB -- #{exclude.map do
                                                                            "':(exclude)#{_1}'"
                                                                          end.join(' ')}`

      prompt = <<~EOS
        Read the following git diff for a multiple files and write headline of commit and bullet points simple commit message in englisht without mentioning lines or files. Explain why these changes were made (summarize the reasoning):

        #{diff}
      EOS

      messages = [
        { role: 'system',
          content: 'You are expert AI, your job is to write clear and concise Git commit messages. Your responsibility is to ensure that these messages accurately describe the changes made in each commit, follow established guidelines. Provide a clear history of changes to the codebase. Write 1-2 sentences. Output only the commit message without comments or other text. ' }, { role: 'user', content: prompt }
      ]

      res = HTTP.auth("Bearer #{ENV['OPENAI_API_KEY']}").post('https://api.openai.com/v1/chat/completions',
                                                        json: {
                                                          messages:,
                                                          max_tokens: 2048,
                                                          model: 'gpt-3.5-turbo-16k-0613',
                                                          temperature: 0
                                                        })

      msg = JSON.parse(res.body.to_s)['choices'][0]['message']['content']

      system("git commit -m '#{msg}'")
      system("git commit --amend -v")
    end


    def git_actions(commit_message)
      branch = current_branch
      system('git add -A')
      ai_commit = !ENV['OPENAI_API_KEY'].nil?
      ai_commit ? use_ai_commit : system("git commit -m '#{commit_message}'")
      system("git pull origin #{branch} --no-edit")
      system("git push origin #{branch}")
    end
  end

  desc 'fuckgit', 'make fuck commit'
  def fuckgit
    commit_message = generate_commit_message
    git_actions(commit_message)
  end
end

GitHelper.start(ARGV)
