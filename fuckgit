#!/usr/bin/env ruby
# frozen_string_literal: true

begin
  require 'thor'
  require 'http'
  require 'open3'
  require 'json'
  require 'tempfile'
rescue LoadError
  system 'gem install thor http'
  Gem.clear_paths
  retry
end

# fuckgit
class GitHelper < Thor
  default_command :fuckgit

  EXCLUDE = [
    '*.lock', '*.lockb', '*-lock.json', '*-lock.yaml'
  ].freeze

  # rubocop:disable Layout/LineLength
  SYSTEM = <<~EOS
    以下にわたされる git diff の結果からコミットメッセージを作ってください。コミットメッセージは以下の内容を含むべきです。 1. 変更から想像される変更の目的、主題(これは変更内容を要約したものではなく、その主題であるべきです、とくによくないのは変更点をただ列挙したようなものです、あくまで主題、意図を推定して力強い一文にしてください) 2. 具体的な変更のうち重要度が高いものを要点にまとめた箇条書き(ここではインデントの変更、変数名の小さな変更など軽微な変更は省略されているほうが望ましいです)。そしてコミットメッセージは以下のようなフォーマットで提供されるべきです。また、コミットメッセージはかならず日本語で生成するようにしてください。

    {変更の目的、主題(ここには内容のみを記載してください)}

    - {変更の要点}
    - {変更の要点}
    ...
  EOS
  # rubocop:enable Layout/LineLength

  # rubocop:disable Metrics/BlockLength
  no_commands do
    def current_branch
      `git rev-parse --abbrev-ref HEAD`.strip
    end

    def generate_commit_message
      changed_files = `git diff --name-only HEAD`.split("\n")
      return '' if changed_files.count.zero?

      if changed_files.size <= 2
        "update #{changed_files.join(', ')}"
      else
        "update\n\n#{changed_files.join("\n")}"
      end
    end

    def use_ai_commit(en=false)
      cmd_base = 'git diff --staged --no-ext-diff --diff-filter=ACMRTUXB'
      diff = `#{cmd_base} -- #{EXCLUDE.map { "':(exclude)#{_1}'" }.join(' ')}`

      prompt = "#{diff}"

      system_prompt = en ? SYSTEM.gsub("日本語", "English") : SYSTEM

      messages = [{ role: 'system', content: system_prompt }, { role: 'user', content: prompt }]

      payload = { messages: messages, max_tokens: 2048, model: 'gpt-4o', temperature: 0 }
      auth = "Bearer #{ENV.fetch('OPENAI_API_KEY', nil)}"

      res = HTTP.auth(auth).post('https://api.openai.com/v1/chat/completions', json: payload)
      msg = JSON.parse(res.body.to_s)['choices'][0]['message']['content']

      Tempfile.create do |f|
        File.open(f.path, 'w') {|t| t.puts msg }
        system "$EDITOR #{f.path}"
        system("git commit -F #{f.path}")
      end
    end

    def git_actions(commit_message, no_push: false, en: false)
      branch = current_branch
      system('git add -A')
      ai_commit = !ENV['OPENAI_API_KEY'].nil?
      ai_commit ? use_ai_commit(en) : system("git commit -m '#{commit_message}'")
      return if no_push

      system("git pull origin #{branch} --no-edit")
      system("git push origin #{branch}")
      system("pr")
    end
  end
  # rubocop:enable Metrics/BlockLength

  desc 'fuckgit', 'make fuck commit'
  option :push, type: :boolean
  option :en, type: :boolean
  long_desc "--push を指定すると push します, --en を指定すると英語になります。"
  def fuckgit
    commit_message = generate_commit_message
    git_actions(commit_message, no_push: !options[:push], en: !!options[:en])
  end
end

GitHelper.start(ARGV)
